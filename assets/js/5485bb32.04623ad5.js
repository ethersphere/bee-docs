"use strict";(self.webpackChunkbee_docs=self.webpackChunkbee_docs||[]).push([[9402],{23366:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=n(74848),o=n(28453);const i={title:"Access Control",id:"act"},r=void 0,c={id:"learn/technology/act",title:"Access Control",description:"The Access Control Trie (ACT) implements the operation of encryption at the chunk level, with the presence of a",source:"@site/docs/learn/technology/access-control.md",sourceDirName:"learn/technology",slug:"/learn/technology/act",permalink:"/docs/learn/technology/act",draft:!1,unlisted:!1,editUrl:"https://github.com/ethersphere/docs.github.io/blob/master/docs/learn/technology/access-control.md",tags:[],version:"current",frontMatter:{title:"Access Control",id:"act"},sidebar:"learn",previous:{title:"PSS",permalink:"/docs/learn/technology/pss"},next:{title:"Overview",permalink:"/docs/learn/technology/contracts/overview"}},a={},l=[{value:"Key Concepts",id:"key-concepts",level:2},{value:"Session",id:"session",level:3},{value:"ACT lookup table",id:"act-lookup-table",level:3},{value:"History",id:"history",level:3},{value:"Encryption",id:"encryption",level:3}];function h(e){const t={h2:"h2",h3:"h3",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The Access Control Trie (ACT) implements the operation of encryption at the chunk level, with the presence of a\ndecryption/encryption key being the only distinction between accessing private and public data."}),"\n",(0,s.jsx)(t.p,{children:"In decentralized public data storage systems like Swarm, data is distributed across multiple nodes. Ensuring\nconfidentiality, integrity, and availability becomes paramount. The Access Control Trie (ACT) addresses these challenges\nby managing access control information for Swarm nodes."}),"\n",(0,s.jsx)(t.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(t.p,{children:"From the perspective of access controlled content, we can identify two main roles:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Role"}),(0,s.jsx)(t.th,{children:"Rights & responsibilities"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Content Publisher"})}),(0,s.jsx)(t.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Publishers upload data and grant access to viewers based on their wallets\u2019 public keys."}),(0,s.jsx)("li",{children:"They can also revoke access from specific viewers."})]})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Grantee (Content Viewer)"})}),(0,s.jsx)(t.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:"Grantees can access the content version allowed by the publisher."}),(0,s.jsx)("li",{children:"However, they may be blocked from accessing new versions of the content."})]})})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"The control is defined by a process to obtain the full (decrypted) reference to the protected content uploaded by the\npublisher, which makes granted access possible."}),"\n",(0,s.jsx)(t.p,{children:"For the management of access by multiple grantees (viewers), an additional layer is introduced to derive the access key\nfrom their specific session key. This data structure, the lookup table for ACT, is implemented as key-value store in a\nSwarm manifest format. The publisher is able to add and remove grantees from this ACT."}),"\n",(0,s.jsx)(t.h3,{id:"session",children:"Session"}),"\n",(0,s.jsx)(t.p,{children:"For each grantee, their public key is used as the session key. Using Diffie-Hellman key derivation, two additional keys\nwill be derived from the session key: a lookup key and an access key decryption key (used for symmetric encryption of\nthe access key). This means each grantee will have the content's access key specifically encrypted for them, and only\nthey will be able to decrypt this, thus gain access to the content."}),"\n",(0,s.jsx)(t.h3,{id:"act-lookup-table",children:"ACT lookup table"}),"\n",(0,s.jsx)(t.p,{children:"The ACT lookup table is a key-value store implemented over a Swarm manifest. It holds lookup keys and encrypted access\nkeys prepared for the grantees when they are added to the ACT (granting access to the content)."}),"\n",(0,s.jsx)(t.h3,{id:"history",children:"History"}),"\n",(0,s.jsx)(t.p,{children:"The history of the ACT is maintained as well. This allows to retrieve a historical version of the ACT based on the\ntimestamp attached to it. This also ensures that grantees will be able to retrieve the content version they were\ngranted access to (using the relevant timestamp), even if their access to newer versions were revoked."}),"\n",(0,s.jsx)(t.h3,{id:"encryption",children:"Encryption"}),"\n",(0,s.jsx)(t.p,{children:"It is important to emphasise that all elements of the process will undergo encryption. Including the grantee list\nitself, which is encrypted using the publisher\u2019s own lookup key, as well as the grantee list\u2019s content reference. This\nensures that the security of the process and the data is always maintained."})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);