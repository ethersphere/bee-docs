"use strict";(self.webpackChunkbee_docs=self.webpackChunkbee_docs||[]).push([[3615],{28453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>a});var t=n(96540);const s={},i=t.createContext(s);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:o},e.children)}},46386:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>h,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"bee/installation/set-target-neighborhood","title":"Set Target Neighborhood","description":"In older versions of Bee, neighborhood assignment was random by default. However, we can maximize a node\'s chances of winning xBZZ and also strengthen the resiliency of the network by strategically assigning neighborhoods to new nodes (see the staking section for more details).","source":"@site/docs/bee/installation/set-target-neighborhood.md","sourceDirName":"bee/installation","slug":"/bee/installation/set-target-neighborhood","permalink":"/docs/bee/installation/set-target-neighborhood","draft":false,"unlisted":false,"editUrl":"https://github.com/ethersphere/docs.github.io/blob/master/docs/bee/installation/set-target-neighborhood.md","tags":[],"version":"current","frontMatter":{"title":"Set Target Neighborhood","id":"set-target-neighborhood"},"sidebar":"bee","previous":{"title":"Build from Source","permalink":"/docs/bee/installation/build-from-source"},"next":{"title":"Hive","permalink":"/docs/bee/installation/hive"}}');var s=n(74848),i=n(28453);const r={title:"Set Target Neighborhood",id:"set-target-neighborhood"},a=void 0,h={},d=[{value:"Setting Neighborhood Manually",id:"setting-neighborhood-manually",level:4}];function l(e){const o={a:"a",admonition:"admonition",code:"code",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:["In older versions of Bee, ",(0,s.jsx)(o.a,{href:"/docs/concepts/DISC/neighborhoods",children:"neighborhood"})," assignment was random by default. However, we can maximize a node's chances of winning xBZZ and also strengthen the resiliency of the network by strategically assigning neighborhoods to new nodes (see the ",(0,s.jsx)(o.a,{href:"/docs/bee/working-with-bee/staking",children:"staking section"})," for more details)."]}),"\n",(0,s.jsxs)(o.p,{children:["Therefore the default Bee configuration now includes the ",(0,s.jsx)(o.code,{children:"neighborhood-suggester"})," option, which is set by default to use the Swarmscan neighborhood suggester (",(0,s.jsx)(o.code,{children:"https://api.swarmscan.io/v1/network/neighborhoods/suggestion"}),"). You can use an alternative suggester URL, but it must return a JSON response in the following format: ",(0,s.jsx)(o.code,{children:'{"neighborhood":"101000110101"}'}),". However, we currently recommend using only the default suggester."]}),"\n",(0,s.jsx)(o.admonition,{type:"info",children:(0,s.jsx)(o.p,{children:"The Swarmscan neighborhood selector prioritizes the least populated neighborhood. If a neighborhood contains imbalanced sub-neighborhoods, it will suggest the least populated sub-neighborhood instead. Furthermore, the suggester will temporarily de-prioritize previously suggested neighborhoods based on the assumption that a new node is being created in each suggested neighborhood so that multiple nodes do not simultaneously attempt to join the same neighborhood."})}),"\n",(0,s.jsx)(o.h4,{id:"setting-neighborhood-manually",children:"Setting Neighborhood Manually"}),"\n",(0,s.jsxs)(o.p,{children:["It's recommended to use the default ",(0,s.jsx)(o.code,{children:"neighborhood-suggester"})," configuration for choosing your node's neighborhood, however you may also set your node's neighborhood manually using the ",(0,s.jsx)(o.code,{children:"target-neighborhood"})," option."]}),"\n",(0,s.jsxs)(o.p,{children:["To use this option, it's first necessary to identify potential target neighborhoods. You can find underpopulated neighborhoods using the ",(0,s.jsx)(o.a,{href:"https://swarmscan.io/neighborhoods",children:"Swarmscan website"}),". It ranks neighborhoods from least to most populated and displays their leading binary bits. Simply copy the leading bits from one of the least populated neighborhoods (for example, ",(0,s.jsx)(o.code,{children:"0010100001"}),") and use it to set ",(0,s.jsx)(o.code,{children:"target-neighborhood"}),". After doing so, an overlay address within that neighborhood will be generated when starting Bee for the first time."]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-yaml",children:'## bee.yaml\ntarget-neighborhood: "0010100001"\n'})}),"\n",(0,s.jsxs)(o.p,{children:["You can also use the ",(0,s.jsx)(o.a,{href:"https://api.swarmscan.io/#tag/Network/paths/~1v1~1network~1neighborhoods~1suggestion/get",children:"Swarmscan API endpoint"})," to programmatically retrieve a suggested neighborhood:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"curl https://api.swarmscan.io/v1/network/neighborhoods/suggestion\n"})}),"\n",(0,s.jsx)(o.p,{children:"A suggested neighborhood will be returned:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:'{"neighborhood":"1111110101"}\n'})})]})}function g(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);