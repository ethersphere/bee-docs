"use strict";(self.webpackChunkbee_docs=self.webpackChunkbee_docs||[]).push([[3460],{48079:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=o(74848),s=o(28453);const r={title:"Starting a Private Network",id:"starting-a-test-network"},a=void 0,i={id:"develop/tools-and-features/starting-a-test-network",title:"Starting a Private Network",description:"A private network can be used to test your applications in an isolated environment before you deploy to Swarm mainnet. It can be started by overriding the default configuration values of your Swarm node. Throughout this tutorial, we will make use of configuration files to configure the nodes but of course you can also do the same using flags or environment variables (see Start your node).",source:"@site/docs/develop/tools-and-features/starting-a-test-network.md",sourceDirName:"develop/tools-and-features",slug:"/develop/tools-and-features/starting-a-test-network",permalink:"/docs/develop/tools-and-features/starting-a-test-network",draft:!1,unlisted:!1,editUrl:"https://github.com/ethersphere/docs.github.io/blob/master/docs/develop/tools-and-features/starting-a-test-network.md",tags:[],version:"current",frontMatter:{title:"Starting a Private Network",id:"starting-a-test-network"},sidebar:"develop",previous:{title:"Developer mode",permalink:"/docs/develop/tools-and-features/bee-dev-mode"},next:{title:"Access Control",permalink:"/docs/develop/tools-and-features/act"}},d={},c=[{value:"Start a network on your own computer",id:"start-a-network-on-your-own-computer",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Starting Your Nodes",id:"starting-your-nodes",level:3},{value:"Making a network",id:"making-a-network",level:3},{value:"Funding Nodes",id:"funding-nodes",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A private network can be used to test your applications in an isolated environment before you deploy to Swarm mainnet. It can be started by overriding the default configuration values of your Swarm node. Throughout this tutorial, we will make use of configuration files to configure the nodes but of course you can also do the same using flags or environment variables (see ",(0,t.jsx)(n.a,{href:"/docs/bee/working-with-bee/configuration",children:"Start your node"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"start-a-network-on-your-own-computer",children:"Start a network on your own computer"}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Starting a network is easiest achieved by making use of configuration files. We need at least two nodes to start a network. Hence, below two configuration files are provided. Save them respectively as ",(0,t.jsx)(n.code,{children:"config_1.yaml"})," and ",(0,t.jsx)(n.code,{children:"config_2.yaml"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"config_1.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'network-id: 7357\napi-addr: 127.0.0.1:1633\np2p-addr: :1634\nbootnode: ""\ndata-dir: /tmp/bee/node1\npassword: set-a-strong-password\nswap-enable: false\nmainnet: false\nblockchain-rpc-endpoint: https://sepolia.dev.fairdatasociety.org\nverbosity: 5\nfull-node: true \n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"config_2.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'network-id: 7357\napi-addr: 127.0.0.1::1733\np2p-addr: :1734\ndata-dir: /tmp/bee/node2\nbootnode: ""\npassword: set-a-strong-password\nwelcome-message: "Bzz Bzz Bzz"\nswap-enable: false\nmainnet: false\nblockchain-rpc-endpoint: https://sepolia.dev.fairdatasociety.org\nverbosity: 5\nfull-node: true \n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note that for each node, we provide a different ",(0,t.jsx)(n.code,{children:"api-addr"}),". If we had not specified different addresses here, we\nwould get an ",(0,t.jsx)(n.code,{children:"address already in use"})," error, as no two applications\ncan listen to the same port. We also specify a different\n",(0,t.jsx)(n.code,{children:"p2p-addr"}),". If we had not, our nodes would not be able to communicate\nwith each other. We also specify a separate ",(0,t.jsx)(n.code,{children:"data-dir"})," for each node,\nas each node must have its own separate key and chunk data store."]}),"\n",(0,t.jsxs)(n.p,{children:["We also provide a network-id, so that our network remains separate\nfrom the Swarm mainnet, which has network-id 1. Nodes will not connect\nto peers which have a different network id. We also set our bootnode\nto be the empty string ",(0,t.jsx)(n.code,{children:'""'}),". A bootnode is responsible for\nbootstrapping the network so that a new node can find its first few\npeers before it begins its own journey to find friends in the\nSwarm. In Swarm any node can be used as a bootnode. Later, we will\nuse our first node as the bootnode for our other node(s), but for now we leave this option blank."]}),"\n",(0,t.jsxs)(n.p,{children:["We have set ",(0,t.jsx)(n.code,{children:"mainnet"})," to false so that our node runs on the Sepolia testnet, and we provide an RPC endpoint for Sepolia in the ",(0,t.jsx)(n.code,{children:"blockchain-rpc-endpoint"})," option. We have also set ",(0,t.jsx)(n.code,{children:"full-node"})," and ",(0,t.jsx)(n.code,{children:"swap-enable"})," to ",(0,t.jsx)(n.code,{children:"true"})," so that we can run full nodes."]}),"\n",(0,t.jsxs)(n.p,{children:["Log verbosity has been set to level 5 with the ",(0,t.jsx)(n.code,{children:"verbosity"})," option. By setting it at the highest level of 5, we make sure all important information is shown in our logs. Setting this is optional."]}),"\n",(0,t.jsxs)(n.p,{children:["Finally, note the ",(0,t.jsx)(n.code,{children:"welcome-message"})," in the first nodes configuration file. This is a friendly feature allowing you to send a message to peers that connect to you!"]}),"\n",(0,t.jsx)(n.h3,{id:"starting-your-nodes",children:"Starting Your Nodes"}),"\n",(0,t.jsxs)(n.p,{children:["Now we have created our configuration files, let's start our nodes by running ",(0,t.jsx)(n.code,{children:"bee start --config config_1.yaml"}),", then in another Terminal session, run ",(0,t.jsx)(n.code,{children:"bee start --config config_2.yaml"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We can now inspect the state of our network by sending HTTP requests to the ",(0,t.jsx)(n.a,{href:"/api/",children:"API"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -s http://localhost:1633/topology | jq .connected\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"0\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -s http://localhost:1733/topology | jq .connected\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"0\n"})}),"\n",(0,t.jsx)(n.p,{children:"No connections yet? Right! Let's remedy that!"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Here we are using the ",(0,t.jsx)(n.code,{children:"jq"})," command line utility to count the amount of objects in the ",(0,t.jsx)(n.code,{children:"peers"})," array in the JSON response we have received from our API, learn more about how to install and use ",(0,t.jsx)(n.code,{children:"jq"})," ",(0,t.jsx)(n.a,{href:"https://stedolan.github.io/jq/",children:"here"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"making-a-network",children:"Making a network"}),"\n",(0,t.jsx)(n.p,{children:"In order to create a network from our two isolated nodes, we must first instruct our nodes to connect to each other. This step is not explicitly needed if you connect to the main Swarm network, as the default bootnodes in the Swarm network will automatically suggest peers."}),"\n",(0,t.jsxs)(n.p,{children:["First, we will need to find out the network address of the first node. To do this, we send a HTTP request to the ",(0,t.jsx)(n.code,{children:"addresses"})," endpoint of the API."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl localhost:1633/addresses | jq\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "overlay": "b1978be389998e8c8596ef3c3a54214e2d4db764898ec17ec1ad5f19cdf7cc59",\n  "underlay": [\n    "/ip4/127.0.0.1/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ",\n    "/ip4/172.25.128.69/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ",\n    "/ip6/::1/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ"\n  ],\n  "ethereum": "0xd22cc790e2aef341827e1e49cc631d2a16898cd9",\n  "publicKey": "023b26ce8b78ed8cdb07f3af3d284c95bee5e038e7c5d0c397b8a5e33424f5d790",\n  "pssPublicKey": "039ceb9c1f0afedf79991d86d89ccf4e96511cf656b43971dc3e878173f7462487"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here, we get firstly the ",(0,t.jsx)(n.strong,{children:"overlay address"})," - this is the permanent address Swarm uses as your anonymous identity in the network and secondly, a list of all the ",(0,t.jsx)(n.a,{href:"https://docs.libp2p.io/reference/glossary/#multiaddr",children:"multiaddresses"}),", which are physical network addresses at which you node can be found by peers."]}),"\n",(0,t.jsxs)(n.p,{children:["Note the addresses starting with an ",(0,t.jsx)(n.code,{children:"/ip4"}),", followed by ",(0,t.jsx)(n.code,{children:"127.0.0.1"}),", which is the ",(0,t.jsx)(n.code,{children:"localhost"})," internal network in your computer. Now we can use this full address to be the bootnode of our second node so that when it starts up, it goes to this address and both nodes become peers of each other. Let's add this into our config_2.yaml file."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"config_2.yaml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'network-id: 7357\napi-addr: 127.0.0.1::1733\np2p-addr: :1734\ndata-dir: /tmp/bee/node2\nbootnode: "/ip4/127.0.0.1/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ"\npassword: set-a-strong-password\nwelcome-message: "Bzz Bzz Bzz"\nswap-enable: false\nblockchain-rpc-endpoint: https://sepolia.dev.fairdatasociety.org\nverbosity: 5\nfull-node: true \n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, we can shut our second node and reboot with the new configuration."}),"\n",(0,t.jsx)(n.p,{children:"Look at the the output for your first node, you should see our connection message!"}),"\n",(0,t.jsx)(n.p,{children:"Let's also verify that we can see both nodes in using each other's API's."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -s http://localhost:1633/peers | jq\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -s http://localhost:1733/peers | jq\n"})}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! You have made your own tiny two bee Swarm! \ud83d\udc1d \ud83d\udc1d"}),"\n",(0,t.jsx)(n.h2,{id:"funding-nodes",children:"Funding Nodes"}),"\n",(0,t.jsx)(n.p,{children:"While you have successfully set up two nodes, they are currently unfunded with either sETH or sBZZ. Sepolia ETH (sETH) is required for issuing transactions on the Sepolia testnet, and Sepolia BZZ (sBZZ) is required for your node to operate as a full staking node."}),"\n",(0,t.jsxs)(n.p,{children:["To fund our nodes, we need to first collect the blockchain addresses for each node. We can use the ",(0,t.jsx)(n.code,{children:"/addresses"})," endpoint for this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl localhost:1633/addresses | jq\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "overlay": "b1978be389998e8c8596ef3c3a54214e2d4db764898ec17ec1ad5f19cdf7cc59",\n  "underlay": [\n    "/ip4/127.0.0.1/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ",\n    "/ip4/172.25.128.69/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ",\n    "/ip6/::1/tcp/1634/p2p/QmQHgcpizgoybDtrQXCWRSGdTP526ufeMFn1PyeGd1zMEZ"\n  ],\n  "ethereum": "0xd22cc790e2aef341827e1e49cc631d2a16898cd9",\n  "publicKey": "023b26ce8b78ed8cdb07f3af3d284c95bee5e038e7c5d0c397b8a5e33424f5d790",\n  "pssPublicKey": "039ceb9c1f0afedf79991d86d89ccf4e96511cf656b43971dc3e878173f7462487"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:['Then copy the address in the "ethereum" field. This is the address you need to send sETH and sBZZ to. There are many public faucets you can use to obtain Sepolia ETH, such as ',(0,t.jsx)(n.a,{href:"https://www.infura.io/faucet/sepolia",children:"this one"})," from Infura."]}),"\n",(0,t.jsxs)(n.p,{children:["To get Sepolia BZZ (sBZZ) you can use ",(0,t.jsx)(n.a,{href:"https://app.uniswap.org/swap?outputCurrency=0x543dDb01Ba47acB11de34891cD86B675F04840db&inputCurrency=ETH",children:"this Uniswap market"}),", just make sure that you've switched to the Sepolia network in your browser wallet."]}),"\n",(0,t.jsx)(n.p,{children:"You will need to send only a very small amount of sETH such as 0.01 sETH, to get started. You will need 10 sBZZ to run a full node with staking."}),"\n",(0,t.jsx)(n.p,{children:"After sending sETH and sBZZ to your node's address which you copied above, restart your node and it should begin operating properly as a full node."}),"\n",(0,t.jsx)(n.p,{children:"Repeat these same steps with the other node in order to complete a private test network of two full nodes."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);